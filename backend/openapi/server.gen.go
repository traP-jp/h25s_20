// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Get a list of rooms
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// Perform an action on a room
	// (POST /rooms/actions)
	PostRoomsActions(ctx echo.Context) error
	// Submit a formula for the current room
	// (POST /rooms/formulas)
	PostRoomsFormulas(ctx echo.Context) error
	// Register a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// PostRoomsActions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoomsActions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoomsActions(ctx)
	return err
}

// PostRoomsFormulas converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoomsFormulas(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoomsFormulas(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.POST(baseURL+"/rooms/actions", wrapper.PostRoomsActions)
	router.POST(baseURL+"/rooms/formulas", wrapper.PostRoomsFormulas)
	router.POST(baseURL+"/users", wrapper.PostUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWy27jNhT9FYLtYtKq0cOPONp5Mi+3gzhwksUgCAJavLY4I5EqSSUxBt40f1Cgu666",
	"7LRAP6B/E7TzGwVJ+SklzUxmZVk6vI9zz72873Ei8kJw4Frh+D1WSQo5sY9PBZHUPBRSFCA1A/s6EVwD",
	"1+YRrkleZIDjs9CLvJbX9u74Pfcw05Db83pWAI4x4xqmIPHcwzm5HrivYdfDOeNr/yo0kZLMDHZKGD9O",
	"hIQN/2HgNdi9BKmY4AZJQSWSFdr+xScpIA5XqAIgMUE6BTQ2CSOliQZctzf3sIQfSyaB4vhsScPKzXpw",
	"58vzYvwWEm3CGQmR1+lkalgAB7qRj5YlLC2MhciAcGNCCpEPNqFhU+YGd0jyTZJsAChcpaa0ZHxq8KUC",
	"6aJZVGl1qsjIDGTjsc3ibBFUxboWzMKPt0q6iadTBfJAgqlCja2CKHUlnCw3a3r8qh91uiglKgWKljhv",
	"LZMO9Hrt3n6PkqgXtPfCTkgD6HQnPZp0o/1ob6/VDVo0oF1CxmNKuxEJQ5jsRSENO+2I9u5ijteY1qC0",
	"+VI/sUXS8ri3Sq3OiTnF+ETY9mHaukjVRdS5iIILBfISJOofDda0GONwN9gNTISiAE4KhmPcsq+MJ51a",
	"Nv0USKZT8zgF29GGa2IYNSrDL0G/cggTtSoEV64MURBsjQJSFBlL7FH/rXJN52ZJvYimw8otlYl3jVw1",
	"ELFZ9uEPFqfKPCdyhmPsAkZJCsk7BJwWgnFtMb4Rorov2ZEFPDLXZQt9LWGCY/yVv5qwfjVefTsL6h1U",
	"S6+PMqa0GVAu+LmHOy6eTdyAayOkDFVqACmF3GLmJWhEtu0tefFJYmy5LhOqgaAjoRxD/QrppAxKPxV0",
	"9gg9OM9WD7zMTVt8PxwcYg+PnvefvcEePugfHjx/jT18fNIfnZgGWQmngt7fZpWH5s5aAc3YndfK367T",
	"7RhAqkwSUGpSZqYw7ebCXJKMUVQx5XCtOu6FkGNGKXD0BHanu6gAmTNlbycKnAFFEyGRzX/HGdmvGzkQ",
	"fJKxRKMn5oZzSaOEcC40GoOxOREyB4oYtxdeUkoJXLsrb+dR4jpythHhC7+CI2JVti4ygykz8hCVvVhA",
	"v5TMKt+bcyf8Nvqm9V37fxW0OPx5Evq0CXLf4HBLWcOkqOhCqhwvhHNF1JpEdx+q0UqBrHpbZW5/id55",
	"sILN1YaYQkZ8bKGFh2p3bRUzVzoaA3BUFpRooGg8Q4QLnYK0Th4n3GPDlxmMa3luNMdKwsst6W7lnlYL",
	"zucq9r7Sr+1FDxJdWCfEmECJtUHXpJHNPm1+7TdbNosMIpkEQmcIrpnSj7uwRjBlSoNExG7rdqGymbsz",
	"Csdn22Zvb/68vfn79qcPtzcfPv781z+/3ZitU2ZmYdK6iH0/EwnJUqF03At6gW82o7m3bebfX//4+Mvv",
	"DQZU7Ptvhqeji6PR8NnpwclgeHhxOnqN5+fz/wIAAP//GbqnqUoNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
