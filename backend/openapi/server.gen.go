// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Get a list of rooms
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// Perform an action on a room
	// (POST /rooms/{roomId}/actions)
	PostRoomsRoomIdActions(ctx echo.Context, roomId int) error
	// Submit a formula for the current room
	// (POST /rooms/{roomId}/formulas)
	PostRoomsRoomIdFormulas(ctx echo.Context, roomId int) error
	// Get room results
	// (GET /rooms/{roomId}/result)
	GetRoomsRoomIdResult(ctx echo.Context, roomId int) error
	// Register a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// PostRoomsRoomIdActions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoomsRoomIdActions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId int

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoomsRoomIdActions(ctx, roomId)
	return err
}

// PostRoomsRoomIdFormulas converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoomsRoomIdFormulas(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId int

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoomsRoomIdFormulas(ctx, roomId)
	return err
}

// GetRoomsRoomIdResult converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomsRoomIdResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId int

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", ctx.Param("roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomsRoomIdResult(ctx, roomId)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.POST(baseURL+"/rooms/:roomId/actions", wrapper.PostRoomsRoomIdActions)
	router.POST(baseURL+"/rooms/:roomId/formulas", wrapper.PostRoomsRoomIdFormulas)
	router.GET(baseURL+"/rooms/:roomId/result", wrapper.GetRoomsRoomIdResult)
	router.POST(baseURL+"/users", wrapper.PostUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX3W7bNhR+FYLbRbtp0U9sx/Gdm6ZttiAOnOSiKIKAFo8tthKpkVRbI/DN8gYDdrer",
	"Xa4bsAfY2wRbX2MgKduypaRxjQ27sqIcnt/v+3R4jWOR5YID1wr3rrGKE8iIfXwiiKTmIZciB6kZ2Nex",
	"4Bq4No/wnmR5Crj3KvQib9dreXf8XnqYacjseT3NAfcw4xomIPHMwxl5f+T+G3Y8nDFe+au0JlKSqbGd",
	"EMbPYiFhJX4YeA1+34JUTHBjSUHFkuXa/onPE0Ac3qHSAIkx0gmgkSkYKU004Lq/mYclfF8wCRT3Xi3a",
	"sAxTTe5ycV6MXkOsTTpDIbJ6O5ka5MCBrtSjZQELDyMhUiDcuJBCZEerpmFT5cbuhGSrTbIJoHBZmtKS",
	"8YmxLxRIl818SstTeUqmIBuPrQ5nrUFlrpVk5nG8ZdF39WkIqki1wUG9Y6o+/qhx/iZaffjmLXfpLIvU",
	"oLQ1r1W5VlVppO6c8oUCeSDBYKiWeU6UeiccqVaTOnvRj9odlBCVAEULu2qKbeh2W939LiVRN2jthe2Q",
	"BtDujLs07kT70d7ebifYpQHtEDIaUdqJSBjCeC8KadhuRbR719x5DScbNaNs5SLlek/MKcbHwpKfaRsi",
	"UVdR+yoKrhTItyBR//SowqQeDneCncBkKHLgJGe4h3ftKxNJJ7abfgIk1Yl5nIDVI9NrYjpqOIKfg37h",
	"LEzWKhdcuTFEQbAmZCTPUxbbo/5r5STDKWED/DTRxRpHxJvGXjU0YnXsg++snSqyjMgp7mGXMIoTiN8g",
	"4DQXjGtr4xsaqfuKHVqDLWtdCMCXEsa4h7/wl98Hv/w4+FbJ6vyvlddHKVPayKtLfubhtstn1e6IawOk",
	"FJVoACmFXOvMc9CIrPtb9MW/dnIz80lsnDq6CdXQqVOhXKuG9kS/tDfAkiQDbZXwVS3Fp/OvhAmEtEA5",
	"yLGQGSIcuZjIfgOYsTYYxR521Koo4YI7TuCXbb9PzmeX7iQo/UTQ6RbQdXnaeLzIDIO/HRydYA8PD/tP",
	"X2IPH/RPDg6PsYfPzvvDc+zh/pOB/T04HpwdXg0Pzy6Ozw3Fl9AvPdwvFGXgZm1Y7cqsBuBWHTBuaEgV",
	"cQxKjYvUQKvVDK23JGUUlQ10drt1u2dCjhilwNEj2JnsmOlmTNntgAJnQNFYSGTb8tg52a87ORB8nLJY",
	"o0dmwyhRERPOhUYjmCMGKGLcQikupASu3crxeCt6nDagEREL1kaaGOMiJQ/nybP5gY2JoopRxgx5y5hI",
	"i/85T8pEVzU+/Dr6aveb1iexPj/8eWDfTK3vE2m3vjeocjlJNxcH8XdEVci081A2lVxh5dv5fM0v0Y8f",
	"zDWzRiCmkKEJm6P2oSyrLO1mfUIjAI6KnBINFI2miHChE5A2yHYUO1vHsVGEKo3vJJu02+wnv92OaG71",
	"3ZxmE9DIBVJoLEX2L3Lsv9gvKjeAjTYNCya7nqvFgGS5rzwEjZ7zUMfiVpuLHVI5HQeRxZXrbvW9KG9L",
	"nytq97W4ck15kC6F9dqNCxRbH7SiHul0s4/xfrNng1dEUgmEThG8Z0pvtz8OYcKUBomIvfrb+42t3J1p",
	"4tjtze+3N3/e/vDh9ubDxx//+OuXG3OFlam5v2id93w/FTFJE6F0rxt0A99cVGbeupu/f/7t40+/NjhQ",
	"Pd9/ObgYXp0OB08vDs6PBidXF8NjPLuc/RMAAP//2ffHC5cRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
