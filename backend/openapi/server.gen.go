// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Get a list of rooms
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
	// Perform an action on a room
	// (POST /rooms/actions)
	PostRoomsActions(ctx echo.Context) error
	// Register a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// PostRoomsActions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoomsActions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoomsActions(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)
	router.POST(baseURL+"/rooms/actions", wrapper.PostRoomsActions)
	router.POST(baseURL+"/users", wrapper.PostUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVz27bxhN+lcX+focEIMw/lmSZN1VJE7WBZSjWIQgCYcUdipuQu+zu0IkQ6FK/QYHe",
	"euqxaYE+QN/GaPMaxe7qjyUqRlufRFDffDPzzTecjzRTVa0kSDQ0/UhNVkDF3ONEqcr+1lrVoFGAeyvM",
	"uAYJ3D7DB1bVJdAUdQMBxWUNNKVzpUpgkq4CqpWqRvvQeIsTEmEBeoO7YBXsIV0BJKbbAINayIXFNwa0",
	"rwahMvtRdcmWoI+GrV8wrdmSrmxe+K4R2jbzelPrnWI2eYJd02+2JGr+FjK0rFMDeqiBIbTVqpkx75V2",
	"EnAwmRY1CiVpSl8+HyTdHimYKYCTLS6400kX+v1O/7zPWdKPOmdxN+YRdHt5n2e95Dw5OzvtRac84j3G",
	"5nPOewmLY8jPkpjH3U7C+19STraURjBo/2lHHIi0DQ92rbU1sVFC5somQYEuRWFmSXeWRDMD+ho0GVyO",
	"aECvQRuvR3wSnUS2QlWDZLWgKT11r2wmLJyaYQGsxMI+LgDtj9WaWUWty+gzwOceYas2tZLGjyGJIvuT",
	"KYkgXSCr61JkLjR8a2wFG++3h2iQYXPgMvXuqFZHhNgf+/hbhzNNVTG9pCn1BZOsgOwdAclrJSQ6TGiN",
	"aO5rduIAD+x1u0L/15DTlP4v3H0RwvXnIHTfgvYGtdobkFIYJConvvhVQLu+nn3cSKI1UknWbgCtlT5Q",
	"5hkgYYd8W11Cllkuv2XKHBHoUhmv0GCN9FYGg18pvnyAH3xm5wfZVHYtvhmPLmhAJ08HT17RgA4HF8On",
	"L2hAX14NJld2QXbGWUPvX7N1huObtQPaz+6qNf5OW26vADFNloExeVPawXSOD+aalYKTtVIed9rGfa30",
	"XHAOkjyCk8UJqUFXwthdJhykAE5ypYnr/7EnOW+TDJXMS5EheXRVAPFNk4xJqZDMwXLmSlfAiZAECyBZ",
	"ozVIJHYh4fGDzHXpuQmTm7xKEuZc5k22PTFfNtd0fR3+q6vuW7g7R+UfDT1uy2ApSOY4+J3Rl8t/N/zz",
	"48z2ChBWamB8SeCDMPiwbZ/AQhgETRiR8J64a+Q69zGGpq8PaW9vfru9+eP2+0+3N58+//D7nz/f2JOt",
	"S3ttEOs0DEuVsbJQBtN+1I9Ce1ZWwSHNXz/9+vnHX44QmDQMX42nk9nlZPxkOrwajS9m08kLunqz+jsA",
	"AP//9B+9hDcJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
